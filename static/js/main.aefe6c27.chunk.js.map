{"version":3,"sources":["corpus/model/GenerateClickEventSubject.js","corpus/model/GenerateCorpusSubject.js","corpus/components/CorpusText.js","corpus/components/GenerateButton.js","corpus/model/GenerateResultSubject.js","result/model/ResultListSubject.js","result/components/ResultList.js","result/components/SavedResultList.js","corpus/model/MarkovChain.js","corpus/model/WordGenerator.js","corpus/model/WordCorpus.js","corpus/model/SentenceGenerator.js","corpus/model/SentenceCorpus.js","utils/TextUtils.js","corpus/model/ConfigurationEventSubject.js","corpus/service/WordGeneratorService.js","settings/components/SettingsSlider.js","settings/components/SettingsToggleButton.js","App.js","serviceWorker.js","index.js"],"names":["generateClickEventSubject","GenerateClickEventSubject","Object","classCallCheck","this","observers","Map","observer","set","delete","event","forEach","key","map","generateCorpusSubject","GenerateCorpusSubject","text","CorpusText","_ref","value","placeholder","rows","cols","_useState","useState","_useState2","slicedToArray","currentText","setCurrentText","useEffect","attach","onGenerateButtonClicked","detach","length","notify","react_default","a","createElement","className","onChange","e","target","GenerateButton","onClick","generateResultSubject","GenerateResultSubject","words","resultListSubject","ResultListSubject","ResultList","currentWords","setCurrentWords","onWordsGenerated","Row","word","innerText","filter","w","SavedResultList","update","concat","toConsumableArray","MarkovChain","markovOrder","_this","addNode","node","nodeChain","get","isNewWord","startNodes","push","workingSet","startNewWord","getRandomStart","getRandomElementOf","getNextRandomNode","nextNodes","getMarkovOrder","list","Math","round","random","WordGenerator","generateWords","count","i","startNode","markovChain","generateWord","next","wordCorpus","generateLetterCorpus","pos","findNextWord","range","min","isSkipCharacter","substring","SentenceGenerator","generateSentences","sentences","generateSentence","sentence","sentenceCorpus","generateWordCorpus","console","log","isEndCharacter","TextUtils","newWords","Array","from","Set","item","sort","b","reverse","pop","elm","newSentences","split","config","WordGeneratorService","onReconfigure","property","onGenerateCorpus","generate","onGenerateWords","onGenerateSentences","error","WordCorpus","wordCount","wordLength","topWords","takeLargestWords","SentenceCorpus","topSentences","takeLargesSentences","configurationEventSubject","SettingsSlider","name","propertyName","label","minValue","maxValue","defaultValue","currentValue","setCurrentValue","htmlFor","OverlayTrigger","placement","overlay","props","Tooltip","assign","id","type","max","newValue","SettingsToggleButton","values","ButtonGroup","toggle","radio","idx","ToggleButton","variant","checked","elmValue","currentTarget","App","possibleConstructorReturn","getPrototypeOf","call","defaultWordLength","defaultMarkovOrder","deafultWordCount","defaultGenerate","defaultText","Container","fluid","Navbar","NavbarBrand","Collapse","Nav","NavDropdown","title","drop","ItemText","components_SettingsSlider","Divider","components_SettingsToggleButton","components_CorpusText","components_GenerateButton","components_SavedResultList","components_ResultList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aefe6c27.chunk.js","sourcesContent":["class GenerateClickEventSubject {\n  constructor() {\n    this.observers = new Map();\n  }\n\n  attach(observer) {\n    this.observers.set(observer, observer);\n  }\n\n  detach(observer) {\n    this.observers.delete(observer);\n  }\n\n  notify(event) {\n    this.observers.forEach((observer, key, map) => observer(event));\n  }\n}\n\nconst generateClickEventSubject = new GenerateClickEventSubject();\n\nexport default generateClickEventSubject;\n","class GenerateCorpusSubject {\n  constructor() {\n    this.observers = new Map();\n  }\n\n  attach(observer) {\n    this.observers.set(observer, observer);\n  }\n\n  detach(observer) {\n    this.observers.delete(observer);\n  }\n\n  notify(text) {\n    this.observers.forEach((observer, key, map) => observer(text));\n  }\n}\n\nconst generateCorpusSubject = new GenerateCorpusSubject();\n\nexport default generateCorpusSubject;\n","import React, { useEffect, useState } from \"react\";\nimport \"./CorpusText.css\";\nimport generateClickEventSubject from \"../model/GenerateClickEventSubject\";\nimport generateCorpusSubject from \"../model/GenerateCorpusSubject\";\n\nfunction CorpusText({ value, placeholder, rows, cols }) {\n  const [currentText, setCurrentText] = useState(value);\n\n  useEffect(() => {\n    generateClickEventSubject.attach(onGenerateButtonClicked);\n    return () => {\n      generateClickEventSubject.detach(onGenerateButtonClicked);\n    };\n  });\n\n  const onChanged = (text) => {\n    setCurrentText(text);\n  };\n\n  const onGenerateButtonClicked = (event) => {\n    if (currentText.length > 0) {\n      generateCorpusSubject.notify(currentText);\n    }\n  };\n\n  return (\n    <textarea\n      placeholder={placeholder}\n      className=\"corpus-text col-12\"\n      onChange={(e) => onChanged(e.target.value)}\n      rows={rows}\n      cols={cols}\n      value={currentText}\n    />\n  );\n}\n\nexport default CorpusText;\n","import React from \"react\";\nimport \"./GenerateButton.css\";\nimport generateClickEventSubject from \"../model/GenerateClickEventSubject\";\n\nfunction GenerateButton() {\n  const onGenerateButtonClicked = (event) => {\n    generateClickEventSubject.notify(event);\n  };\n\n  return (\n    <button\n      onClick={(e) => onGenerateButtonClicked(e)}\n      className=\"button-generate button-generate col-12\"\n    >\n      Generate\n    </button>\n  );\n}\n\nexport default GenerateButton;\n","class GenerateResultSubject {\n  constructor() {\n    this.observers = new Map();\n  }\n\n  attach(observer) {\n    this.observers.set(observer, observer);\n  }\n\n  detach(observer) {\n    this.observers.delete(observer);\n  }\n\n  notify(words) {\n    this.observers.forEach((observer, key, map) => observer(words));\n  }\n}\n\nconst generateResultSubject = new GenerateResultSubject();\n\nexport default generateResultSubject;\n","class ResultListSubject {\n  constructor() {\n    this.observers = new Map();\n  }\n\n  attach(observer) {\n    this.observers.set(observer, observer);\n  }\n\n  detach(observer) {\n    this.observers.delete(observer);\n  }\n\n  notify(text) {\n    this.observers.forEach((observer, key, map) => observer(text));\n  }\n}\n\nconst resultListSubject = new ResultListSubject();\n\nexport default resultListSubject;\n","import React, { useEffect, useState } from \"react\";\nimport generateResultSubject from \"../../corpus/model/GenerateResultSubject\";\nimport resultListSubject from \"../model/ResultListSubject\";\nimport \"./ResultList.css\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction ResultList() {\n  const [currentWords, setCurrentWords] = useState([]);\n\n  useEffect(() => {\n    generateResultSubject.attach(onWordsGenerated);\n    return () => {\n      generateResultSubject.detach(onWordsGenerated);\n    };\n  });\n\n  const onWordsGenerated = (words) => {\n    setCurrentWords(words);\n  };\n\n  const clicked = (word) => {\n    resultListSubject.notify(word);\n    setCurrentWords(currentWords.filter((w) => w !== word));\n  };\n\n  return (\n    <Row>\n      {currentWords.map((word) => (\n        <div\n          className=\"listItem span-4\"\n          onClick={(e) => clicked(e.target.innerText)}\n          key={word}\n        >\n          {word}\n        </div>\n      ))}\n    </Row>\n  );\n}\n\nexport default ResultList;\n","import React, { useEffect, useState } from \"react\";\nimport resultListSubject from \"../model/ResultListSubject\";\nimport Row from \"react-bootstrap/Row\";\nimport \"./ResultList.css\";\n\nfunction SavedResultList() {\n  const [currentWords, setCurrentWords] = useState([]);\n\n  useEffect(() => {\n    resultListSubject.attach(update);\n    return () => {\n      resultListSubject.detach(update);\n    };\n  });\n\n  const update = (word) => {\n    setCurrentWords([...currentWords, word]);\n  };\n\n  return (\n    <Row>\n      {currentWords.map((word) => (\n        <div className=\"listItem span-4\" key={word}>\n          {word}\n        </div>\n      ))}\n    </Row>\n  );\n}\n\nexport default SavedResultList;\n","class MarkovChain {\n  constructor(markovOrder) {\n    this.markovOrder = markovOrder;\n    this.nodeChain = new Map();\n    this.workingSet = null;\n    this.startNodes = [];\n  }\n\n  addNode = (node) => {\n    if (this.nodeChain.get(node) == null) {\n      this.nodeChain.set(node, []);\n    }\n\n    if (this.isNewWord()) {\n      this.startNodes.push(node);\n    } else {\n      this.workingSet.push(node);\n    }\n    this.workingSet = this.nodeChain.get(node);\n  };\n\n  isNewWord = () => {\n    return this.workingSet == null;\n  };\n\n  startNewWord = () => {\n    this.workingSet = null;\n  };\n\n  getRandomStart = () => {\n    return this.getRandomElementOf(this.startNodes);\n  };\n\n  getNextRandomNode = (node) => {\n    var nextNodes = this.nodeChain.get(node);\n\n    if (nextNodes == null || nextNodes.length === 0) {\n      return null;\n    }\n    return this.getRandomElementOf(nextNodes);\n  };\n\n  getRandomElementOf(list) {\n    return list[Math.round((list.length - 1) * Math.random())];\n  }\n\n  getMarkovOrder = () => {\n    return this.markovOrder;\n  };\n}\n\nexport default MarkovChain;\n","/**\n *  Generates words from populated markov chain\n */\nclass WordGenerator {\n  constructor(MarkovChain) {\n    this.markovChain = MarkovChain;\n  }\n\n  /**\n   * Generates a list of words from populated markov chain\n   */\n  generateWords = (count, length) => {\n    var words = [];\n    for (var i = 0; i < count; i++) {\n      this.count = 0;\n      var startNode = this.markovChain.getRandomStart();\n      words.push(\n        this.generateWord(\n          length - this.markovChain.getMarkovOrder(),\n          startNode,\n          startNode\n        )\n      );\n    }\n    return words;\n  };\n\n  /**\n   * Sub-routine for generate words\n   */\n  generateWord = (length, node, word) => {\n    if (length <= 0) {\n      return word;\n    }\n    var next = this.markovChain.getNextRandomNode(node);\n\n    if (next == null) {\n      return word;\n    }\n\n    word = word.concat(next);\n    return this.generateWord(\n      length - this.markovChain.getMarkovOrder(),\n      next,\n      word\n    );\n  };\n}\n\nexport default WordGenerator;\n","import MarkovChain from \"./MarkovChain\";\nimport WordGenerator from \"./WordGenerator\";\n\nclass WordCorpus {\n  generateLetterCorpus = (text, markovOrder) => {\n    let markovChain = new MarkovChain(markovOrder);\n    let pos = 0;\n    while (pos < text.length) {\n      pos = this.findNextWord(markovChain, text, pos);\n      markovChain.startNewWord();\n    }\n    return new WordGenerator(markovChain);\n  };\n\n  findNextWord = (markovChain, text, pos) => {\n    let range = pos;\n    let markovOrder = markovChain.getMarkovOrder();\n    while (\n      range < Math.min(pos + markovOrder, text.length) &&\n      this.isSkipCharacter(text, range)\n    ) {\n      // add current range everytime it passes markov order, then move pos up to that point\n      range++;\n      if ((range - pos) % markovOrder === 0) {\n        markovChain.addNode(text.substring(pos, range));\n        pos = range;\n      }\n    }\n    // add any last range to markov chain if it was increased from pos.\n    if (range > pos) {\n      markovChain.addNode(text.substring(pos, range));\n    }\n    return range + 1;\n  };\n\n  isSkipCharacter(text, pos) {\n    return (\n      text[pos] !== \" \" &&\n      text[pos] !== \"\\n\" &&\n      text[pos] !== \".\" &&\n      text[pos] !== \",\" &&\n      text[pos] !== \"!\" &&\n      text[pos] !== \"?\"\n    );\n  }\n}\n\nconst wordCorpus = new WordCorpus();\n\nexport default wordCorpus;\n","class SentenceGenerator {\n  constructor(markovChain) {\n    this.markovChain = markovChain;\n  }\n\n  /**\n   * Generates a list of words from populated markov chain\n   */\n  generateSentences = (count, length) => {\n    var sentences = [];\n    for (var i = 0; i < count; i++) {\n      var startNode = this.markovChain.getRandomStart();\n      sentences.push(\n        this.generateSentence(\n          length - this.markovChain.getMarkovOrder(),\n          startNode,\n          startNode\n        )\n      );\n    }\n    return sentences;\n  };\n\n  /**\n   * Sub-routine for generate words\n   */\n  generateSentence = (length, node, sentence) => {\n    if (length <= 0) {\n      return sentence;\n    }\n    var next = this.markovChain.getNextRandomNode(node);\n\n    if (next == null) {\n      return sentence;\n    }\n\n    sentence = sentence.concat(\" \" + next);\n    return this.generateSentence(\n      length - this.markovChain.getMarkovOrder(),\n      next,\n      sentence\n    );\n  };\n}\n\nexport default SentenceGenerator;\n","import MarkovChain from \"./MarkovChain\";\nimport SentenceGenerator from \"./SentenceGenerator\";\n\nclass SentenceCorpus {\n  generateWordCorpus = (text, markovOrder) => {\n    let markovChain = new MarkovChain(markovOrder);\n    let pos = 0;\n    while (pos < text.length) {\n      pos = this.findNextWord(markovChain, text, pos);\n    }\n    console.log(markovChain);\n    return new SentenceGenerator(markovChain);\n  };\n\n  findNextWord = (markovChain, text, pos) => {\n    let range = pos;\n    while (range < text.length && this.isSkipCharacter(text, range)) {\n      range++;\n    }\n\n    if (range > pos) {\n      markovChain.addNode(text.substring(pos, range));\n    }\n    if (this.isEndCharacter(text, range)) {\n      markovChain.startNewWord();\n    }\n    return range + 1;\n  };\n\n  isEndCharacter(text, pos) {\n    return text[pos] === \".\" || text[pos] === \"!\" || text[pos] === \"?\";\n  }\n\n  isSkipCharacter(text, pos) {\n    return (\n      text[pos] !== \" \" &&\n      text[pos] !== \"\\n\" &&\n      text[pos] !== \".\" &&\n      text[pos] !== \"!\" &&\n      text[pos] !== \"?\"\n    );\n  }\n}\n\nconst sentenceCorpus = new SentenceCorpus();\n\nexport default sentenceCorpus;\n","class TextUtils {\n  /**\n   * keeps the 'count' largest words in place.\n   * @param {*} words words array\n   * @param {*} count count to keep\n   */\n  static takeLargestWords(words, count) {\n    // distinct\n    var newWords = Array.from(new Set(words.map((item) => item)));\n    newWords.sort((a, b) => a.length - b.length);\n    newWords.reverse();\n    // empty words array\n    while (words.length > 0) {\n      words.pop();\n    }\n    while (newWords.length > count) {\n      newWords.pop();\n    }\n    newWords.forEach((elm) => words.push(elm));\n    return words;\n  }\n\n  static takeLargesSentences(sentences, count) {\n    // distinct\n    var newSentences = Array.from(new Set(sentences.map((item) => item)));\n    newSentences.sort((a, b) => a.split(\" \").length - b.split(\" \").length);\n    newSentences.reverse();\n    // empty words array\n    while (sentences.length > 0) {\n      sentences.pop();\n    }\n    while (newSentences.length > count) {\n      newSentences.pop();\n    }\n    newSentences.forEach((elm) => sentences.push(elm));\n    return sentences;\n  }\n}\n\nexport default TextUtils;\n","class GenerateClickEventSubject {\n  constructor() {\n    this.observers = new Map();\n  }\n\n  attach(observer) {\n    this.observers.set(observer, observer);\n  }\n\n  detach(observer) {\n    this.observers.delete(observer);\n  }\n\n  notify(config) {\n    this.observers.forEach((observer, key, map) => observer(config));\n  }\n}\n\nconst generateClickEventSubject = new GenerateClickEventSubject();\n\nexport default generateClickEventSubject;\n","import WordCorpus from \"../model/WordCorpus\";\nimport SentenceCorpus from \"../model/SentenceCorpus\";\nimport TextUtils from \"../../utils/TextUtils\";\nimport generateResultSubject from \"../model/GenerateResultSubject\";\nimport generateCorpusSubject from \"../model/GenerateCorpusSubject\";\nimport configurationEventSubject from \"../model/ConfigurationEventSubject\";\n\nclass WordGeneratorService {\n  constructor(config) {\n    this.config = config;\n\n    generateCorpusSubject.attach(this.onGenerateCorpus);\n    configurationEventSubject.attach(this.onReconfigure);\n  }\n\n  onReconfigure = (config) => {\n    this.config[config.property] = config.value;\n  };\n\n  onGenerateCorpus = (text) => {\n    if (this.config.generate === \"words\") {\n      this.onGenerateWords(text);\n    } else if (this.config.generate === \"sentences\") {\n      this.onGenerateSentences(text);\n    } else {\n      console.error(\"config.generate is not set: \" + this.config.generate);\n    }\n  };\n\n  onGenerateWords = (text) => {\n    let words = WordCorpus.generateLetterCorpus(\n      text,\n      this.config.markovOrder\n    ).generateWords(this.config.wordCount + 100, this.config.wordLength);\n    let topWords = TextUtils.takeLargestWords(words, this.config.wordCount);\n    generateResultSubject.notify(topWords);\n  };\n\n  onGenerateSentences = (text) => {\n    let sentences = SentenceCorpus.generateWordCorpus(\n      text,\n      this.config.markovOrder\n    ).generateSentences(this.config.wordCount + 100, this.config.wordLength);\n    let topSentences = TextUtils.takeLargesSentences(\n      sentences,\n      this.config.wordCount\n    );\n    generateResultSubject.notify(topSentences);\n  };\n}\n\nexport default WordGeneratorService;\n","import React, { useState } from \"react\";\nimport \"./Settings.css\";\nimport configurationEventSubject from \"../../corpus/model/ConfigurationEventSubject\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nfunction SettingsSlider({\n  name,\n  propertyName,\n  label,\n  minValue,\n  maxValue,\n  defaultValue,\n}) {\n  const [currentValue, setCurrentValue] = useState(defaultValue);\n\n  const changeWordLength = (elm) => {\n    var newValue = elm.target.value;\n    if (newValue <= maxValue && newValue >= minValue) {\n      setCurrentValue(newValue);\n      configurationEventSubject.notify({\n        property: propertyName,\n        value: newValue,\n      });\n    }\n  };\n\n  const renderTooltip = (props) => (\n    <Tooltip id=\"settings-slider-tooltip\" {...props}>\n      {label}: {currentValue}\n    </Tooltip>\n  );\n\n  return (\n    <div className=\"settings-slider-container col-12\">\n      <div className=\"settings-slider-container settings-label col-12\">\n        <label htmlFor={name}>{label}</label>\n      </div>\n      <div className=\"settings-slider-container col-12\">\n        <OverlayTrigger placement=\"top\" overlay={renderTooltip}>\n          <input\n            className=\"settings-slider\"\n            name={\"Settings\" + name}\n            id={name}\n            type=\"range\"\n            value={currentValue}\n            max={maxValue}\n            min={minValue}\n            onChange={changeWordLength}\n          />\n        </OverlayTrigger>\n      </div>\n    </div>\n  );\n}\n\nexport default SettingsSlider;\n","import React, { useState } from \"react\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport configurationEventSubject from \"../../corpus/model/ConfigurationEventSubject\";\n\nfunction SettingsToggleButton({\n  name,\n  propertyName,\n  label,\n  values,\n  defaultValue,\n}) {\n  const [currentValue, setCurrentValue] = useState(defaultValue);\n\n  const onChange = (elmValue) => {\n    setCurrentValue(elmValue);\n    configurationEventSubject.notify({\n      property: propertyName,\n      value: elmValue,\n    });\n  };\n\n  return (\n    <div className=\"settings-toggle-button-container col-12\">\n      <label htmlFor={name}>{label}</label>\n      <ButtonGroup toggle className=\"settings-toggle-button\">\n        {values.map((radio, idx) => (\n          <ToggleButton\n            key={idx}\n            id={name}\n            type=\"radio\"\n            variant=\"secondary\"\n            name=\"radio\"\n            value={radio.value}\n            checked={currentValue === radio.value}\n            onChange={(e) => onChange(e.currentTarget.value)}\n          >\n            {radio.name}\n          </ToggleButton>\n        ))}\n      </ButtonGroup>\n    </div>\n  );\n}\n\nexport default SettingsToggleButton;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CorpusText from \"./corpus/components/CorpusText\";\nimport GenerateButton from \"./corpus/components/GenerateButton\";\nimport ResultList from \"./result/components/ResultList\";\nimport SavedResultList from \"./result/components/SavedResultList\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport WordGeneratorService from \"./corpus/service/WordGeneratorService\";\nimport { Navbar, NavbarBrand, Nav, NavDropdown } from \"react-bootstrap\";\nimport SettingsSlider from \"./settings/components/SettingsSlider\";\nimport SettingsToggleButton from \"./settings/components/SettingsToggleButton\";\n\nclass App extends Component {\n  defaultWordLength = 12;\n  defaultMarkovOrder = 2;\n  deafultWordCount = 20;\n  defaultGenerate = \"words\";\n\n  defaultText =\n    \"example jellyfish pancake balloon sausage chocolate cream beans cowboy cartoon dancer party super shrimp warrior waffles award wacky gorilla monkey\" +\n    \" business alien smelly karate kid phantom kinky cleaner round granade hamburger strawberry balloon banana terminator fart brain sticky fingers\" +\n    \" engineer pees football player trooper graceful joker transaction figure bandit bandana fantastic chuck norris melon robot doctor frankenstein\";\n\n  constructor(props) {\n    super(props);\n\n    this.WordGeneratorService = new WordGeneratorService({\n      wordLength: this.defaultWordLength,\n      markovOrder: this.defaultMarkovOrder,\n      wordCount: this.deafultWordCount,\n      generate: this.defaultGenerate,\n    });\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row className=\"header-row\">\n          <Navbar className=\"top-banner col-12 settings-dropdown-button\">\n            <NavbarBrand>\n              <h1 className=\"app-title-small\">[n] gram</h1>\n            </NavbarBrand>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"ml-auto\">\n                <NavDropdown\n                  title=\"Settings\"\n                  id=\"basic-nav-dropdown\"\n                  drop=\"left\"\n                >\n                  <NavDropdown.ItemText className=\"settings-dropdown-item\">\n                    <SettingsSlider\n                      name=\"word-length\"\n                      label=\"Word Length\"\n                      propertyName=\"wordLength\"\n                      minValue={4}\n                      maxValue={20}\n                      defaultValue={this.defaultWordLength}\n                    />\n                  </NavDropdown.ItemText>\n                  <NavDropdown.ItemText className=\"settings-dropdown-item\">\n                    <SettingsSlider\n                      name=\"word-count\"\n                      label=\"Result Count\"\n                      propertyName=\"wordCount\"\n                      minValue={5}\n                      maxValue={40}\n                      defaultValue={this.deafultWordCount}\n                    />\n                  </NavDropdown.ItemText>\n                  <NavDropdown.ItemText className=\"settings-dropdown-item\">\n                    <SettingsSlider\n                      name=\"markov-order\"\n                      label=\"Markov Order\"\n                      propertyName=\"markovOrder\"\n                      minValue={1}\n                      maxValue={10}\n                      defaultValue={this.defaultMarkovOrder}\n                    />\n                  </NavDropdown.ItemText>\n                  <NavDropdown.Divider />\n                  <NavDropdown.ItemText className=\"settings-dropdown-item\">\n                    <SettingsToggleButton\n                      name=\"generate-toggle-button\"\n                      propertyName=\"generate\"\n                      label=\"Generate:\"\n                      values={[\n                        { name: \"Words\", value: \"words\" },\n                        { name: \"Sentences\", value: \"sentences\" },\n                      ]}\n                      defaultValue=\"words\"\n                    />\n                  </NavDropdown.ItemText>\n                </NavDropdown>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          <header className=\"app-header col-12\">\n            <Row className=\"app-header-content justify-content-left\">\n              <div className=\"title-container d-none d-lg-block offset-xs-4 col-xs-4 offset-sm-4 col-sm-4 offset-md-0 col-md-4 offset-lg-0 col-lg-4 offset-xl-0 col-xl-4\">\n                <Row className=\"justify-content-center col-12\">\n                  <div className=\"app-title\">\n                    <h1 className=\"app-title-n glow\">[n]</h1>\n                    <h1 className=\"app-title-gram glow\">gram</h1>\n                  </div>\n                  <h1 className=\"app-subtitle col-12\">Word Generator</h1>\n                </Row>\n              </div>\n              <div className=\"corpus-container col-12 col-lg-7\">\n                <CorpusText\n                  value={this.defaultText}\n                  placeholder=\"Enter Corpus text here ... \"\n                  rows={10}\n                  cols={50}\n                />\n              </div>\n            </Row>\n            <Row className=\"justify-content-center\">\n              <div className=\"col-12 col-md-4 col-lg-4 col-xl-2\">\n                <GenerateButton />\n              </div>\n            </Row>\n          </header>\n        </Row>\n        <Row className=\"result-row justify-content-center\">\n          <div className=\"col-12 offset-md-1 col-md-3 offset-lg-1 col-lg-3 offset-xl-0 col-xl-3\">\n            <SavedResultList />\n          </div>\n          <div className=\"col-12 offset-md-1 col-md-6 offset-lg-1 col-lg-6 offset-xl-1 col-xl-6\">\n            <ResultList />\n          </div>\n        </Row>\n        <Row className=\"footer-row justify-content-center\">\n          <div className=\"footer-text col-10 col-md-6\">\n            <h2>ngramjs</h2>\n            <p>\n              n-gram word generator, or ngramjs as the github project is called,\n              is a simple random word and sentence generator based on the n-gram\n              model. The project is built using React and React-bootstrap.\n            </p>\n          </div>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}